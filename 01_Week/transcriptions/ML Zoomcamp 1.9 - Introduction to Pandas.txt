[0:00:00.18 --> 0:00:03.80]	  Welcome back. This is lesson nine of machine learning zoom cup session one.
[0:00:04.34 --> 0:00:09.12]	  And we will talk about pandas. So this is the last lesson for session one.
[0:00:09.26 --> 0:00:11.50]	  Took a bit longer than I expected.
[0:00:12.70 --> 0:00:18.40]	  And yeah, let's let's start. Pandas is a library for manipulating table or data in Python.
[0:00:19.38 --> 0:00:25.48]	  So by now, hopefully you have installed everything, including pandas.
[0:00:25.48 --> 0:00:31.52]	  And again, like in case of NumPy, we use an alias for referring to pandas.
[0:00:31.84 --> 0:00:33.64]	  So we import pandas as PD.
[0:00:34.46 --> 0:00:41.94]	  So the main abstraction, the main data structure we use in pandas is called a data frame, which is basically a table.
[0:00:42.36 --> 0:00:49.14]	  So let's create a simple one. We will use a data set that I prepared specifically for this session.
[0:00:49.58 --> 0:01:00.34]	  So I take it from GitHub repo that you'll find the link in the description. So this is a data set. This is how it looks like.
[0:01:00.74 --> 0:01:09.66]	  So this is a subset of a data set that we will use for the next session for predicting the price of a car.
[0:01:09.74 --> 0:01:11.52]	  So it has five cars.
[0:01:12.60 --> 0:01:24.46]	  And these are the characteristics of a car. Make model year engine horsepower number of cylinders, transmission type vehicle style. And this is the price.
[0:01:25.06 --> 0:0]	  So we have the data in this format. So this is a list of lists. And then we have a separate variable that defines the cones. So let's let me copy it.
[0:01:38.78 --> 0:01:49.78]	  And paste it here. So again, so this is a list of lists. So each sub list of this list is a row in the table. So each row is a car.
[0:01:50.10 --> 0:01:59.68]	  And then for the first column here, it's make the second one model year engine horsepower and so on.
[0:01:59.82 --> 0:02:11.60]	  So this is now we can turn it into a data frame. So for that we create a data frame using this, this function data frame it's constructor.
[0:02:11.98 --> 0:02:23.90]	  So if we just created with data, it doesn't know what the columns are. So it just puts zero one two three four, because it doesn't know what this column means mean.
[0:02:24.84 --> 0:02:43.92]	  And we can let it know what each of the column means by using a special perimeter columns. And we can say that should be equal to columns. So basically, if we do this, then pandas knows that okay for so this make this is model year and so on.
[0:02:44.56 --> 0:03:00.74]	  So let's save it into a data frame. So usually I call data frames DFS. And yeah, it's not the only way you can create a data frame. There are many other ways. So for example, again, if we go to this GitHub repo.
[0:03:01.02 --> 0:03:30.72]	  So it can be. So this is like a more compact way. So here, we don't mention the name of the column in every row. So we just mentioned it once at the end, but it's also possible to have a list of dictionaries.
[0:03:30.82 --> 0:03:46.96]	  So first car, then this is the second car, and we have many cars like that. And so if we have a list of dictionaries, we can also use them to create a data frame. So let me paste it.
[0:03:48.54 --> 0:04:06.10]	  And so again, PD data frame. And then all we need to provide is just this list of dictionaries. And then so here we don't specify we don't provide the names of columns. It just infers them the names of columns from the dictionaries.
[0:04:06.10 --> 0:04:18.12]	  So because we have the keys here and the values. So pandas uses keys as the column names. So let's write it to a data frame.
[0:04:19.20 --> 0:04:29.26]	  This is a really small data frame. But what I usually do when I read the larger data frame is the first thing I do is look at the first couple of rows.
[0:04:29.86 --> 0:04:42.28]	  So yeah, well, for that we for that I use the head method, which returns the first rows. So since our data frame is quite small, it returns the first five rows.
[0:04:43.08 --> 0:04:58.94]	  But yeah, we can say let's return me only the first two rows.
[0:04:58.94 --> 0:05:01.90]	  So we're using the head method. Okay, so we have this data frame.
[0:0 --> 0:05:22.10]	  And every column of this data frame is a series. So this is a special game. So this is an abstraction from pandas that data frame is a table and table consists of multiple series and each column is a panda series.
[0:05:22.60 --> 0:05:36.34]	  And if we want to access a particular series in another frame. So if we just want to access this the column make. So we just use this dot notation. Right. So we just write data frame dot make
[0:05:37.24 --> 0:05:42.08]	  Another option is instead of using the dot notation we use the brackets notation.
[0:05:42.92 --> 0:05:52.90]	  So we specify the name of the column we want to extract here and use the brackets. And this is the same.
[0:05:53.72 --> 0:06:02.98]	  And as you see, so here we have some columns that have spaces in them. So we cannot really use dot notation here, it will now say okay, I don't know what is that.
[0:06:03.88 --> 0:06:13.60]	  So for these cases, let's say when we have minuses or when we have spaces there, the only way we can access the variable is using these brackets.
[0:06:14.50 --> 0:06:28.62]	  Also we can access multiple rows at the same time. So let's say if we want to get a subset of our data frame that contains only make model and price.
[0:06:29.62 --> 0:06:45.46]	  So we what we do is we put a list inside brackets. So that's why we have these double brackets. And in this list, we say which columns we want to have. So in this case, we want to have make model and price.
[0:0 --> 0:06:51.86]	  And it returns a data frame that has only these three columns. Right. So it doesn't have anything else.
[0:06:52.96 --> 0:07:09.16]	  Yeah, so this is our data frame. And let's say we want to add another column to this data frame. So let's say we want to add a column called ID. So we can do this by using this notation again, brackets.
[0:07:12.14 --> 0:07:20.50]	  And so if we just try to get ID, it says okay, I don't know what is that. But we can say we can create a new column.
[0:07:22.28 --> 0:07:39.26]	  And this is how we do this. So we use the same notation as here. And we just say, okay, for this, we want to have a new column that we will call ID that contains numbers from one to five.
[0:07:39.26 --> 0:07:47.62]	  So if this way we do this and then now you see that there is a cold cold ID that we can now extract.
[0:07:48.48 --> 0:08:02.86]	  And we can actually also replace it if we want. So let's say we want to change it instead of this we want to have a different, different set of values.
[0:08:04.84 --> 0:08:16.48]	  So now we replace it. If we want to delete a column, we use the Dell operator, which deletes a column from this.
[0:0 --> 0:08:27.74]	  So this is very similar to dictionaries. If we want to remove something from a dictionary, we use the Dell operator. And here we can do the same with pandas.
[0:08:28.20 --> 0:08:39.94]	  And you see this column is gone. Yeah, so we talked about columns and in data frame, maybe you see here numbers here. So these are IDs of rows.
[0:08:40.48 --> 0:08:44.80]	  So this is how we can refer to each row. And this is actually called index.
[0:08:45.86 --> 0:08:54.50]	  So if we look at the index, we see that there is an index called range index that starts with zero. So this is the first one.
[0:08:54.88 --> 0:09:04.76]	  And stops at five five is not inclusive. Like usually it's exclusive. So we have an index that goes from zero to four.
[0:09:04.84 --> 0:09:13.04]	  All the series of this data frame, they all have the same index. So let's say if we access make.
[0:09:14.34 --> 0:09:27.58]	  See, we have this, again, these numbers here, these are the indices. This is the index of make. And again, if we try to access the index, we see this is the same index that data frame has.
[0:09:28.06 --> 0:09:32.64]	  So using this index, we can access the elements of the data frame.
[0:09:34.14 --> 0:09:50.40]	  So let's say we have, we want to access element one and two, then we use lock. So lock stands for location, I think. So let's say if we want to get the element that is indexed by one, we use lock.
[0:09:51.54 --> 0:10:06.26]	  And we get the row. Let me show it once again. So this is the, this row indexed by one, and we get this role here. And then we also can return multiple rows.
[0:10:07.66 --> 0:10:15.28]	  So we can use this lock to get multiple rows. And this is what we look at. So this is the index.
[0:10:16.12 --> 0:10:33.94]	  We can actually replace this index. So we can use something else. So let's say if instead of that, we want to use some ID. So it could be a b c d e.
[0:10:36.08 --> 0:10:58.70]	  So now index is different. You see, this is what we use. And this no longer works. It says, I don't know what you're talking about. There are no records with these IDs in the index. So now we need to use, let's say, b and c to refer to this particular records in the data frame.
[0:10:58.74 --> 0:11:08.34]	  So we, however, still can refer to a positional index. So this is usual index, right, and then there is a positional index and positional index.
[0:11:08.78 --> 0:11:25.54]	  This is what we usually use in, in lists or NumPy arrays. So this is like when it refers to position from zero to four. So this is what we previously had as a range, a ranch index.
[0:11:26.02 --> 0:11:41.30]	  We still can refer to elements using positional index, except instead of lock, we will need to use I lock. So let's say if we want to get element index by one, we use I lock one.
[0:11:42.58 --> 0:11:57.54]	  And again, we can ask multiple elements. And this is how we use it. So if you see that the index is still the old index, but we use the positional index to refer to the elements to the records of this data frame.
[0:11:57.70 --> 0:12:12.32]	  And now we have this range index, right? So let's say if we want to come back to the usual index, which is sequential coming from zero to one, what we use is we use the function called reset index.
[0:12:13.86 --> 0:12:29.70]	  And yeah, what it does, it again, it resets the index to the sequential index, and it keeps the previous index and it creates a new column called index to keep the values from the old index.
[0:12:31.08 --> 0:12:42.12]	  And if we let's say if we don't need the values of the old index, we use this parameter called drop true, which drops the index and just keeps the new one.
[0:12:42.88 --> 0:12:53.02]	  Actually, this function doesn't change the data frame. So it creates a new data frame. You see, so here the original data frame is still unchanged.
[0:12:53.46 --> 0:13:07.96]	  So here it returns in you that the frame that has the same data, but the new index. So what we can do if we want to complete if I get about the old one, we just reassign to do this DF variable.
[0:13:08.14 --> 0:13:16.20]	  So we kind of overwrite the old data frame with a new one. And yeah, so now we have, we're back to the data frame we had.
[0:13:19.50 --> 0:13:29.94]	  Okay, so yeah, I actually talked about access elements already. So this was about this lock and I lock. So now let's talk about element by separations.
[0:13:30.18 --> 0:13:40.44]	  Like in NumPy, we remember in NumPy, when we have an array, we can apply an operation to an array to all the elements of this array.
[0:13:40.88 --> 0:13:51.96]	  Right. So, for example, if we multiply an array by two, then all the elements of that array get multiplied by two. So actually the same, we can do the same with pandas.
[0:13:52.96 --> 0:14:04.54]	  So let's say we have this engine HP column. Let's say we want to divide it by 100. So this is how we do it. This is exactly the same as with NumPy array.
[0:14:05.08 --> 0:1]	  So here, yeah, I didn't talk about this none. So this is just the nodes. This denotes a missing number. So for this row, we don't know what is the engine horsepower.
[0:14:17.26 --> 0:14:26.34]	  So we just don't know this value is missing. And when you divide, so for this one, it doesn't do anything, but the rest, it divides the rest by 100.
[0:14:26.92 --> 0:14:38.44]	  We can multiply by two. Basically, we can do everything we can do in NumPy. But here we operate on series from pandas, not on NumPy arrays.
[0:14:39.08 --> 0:14:49.92]	  And the main difference between the two is that here you have an index, here you have a name, but it's pretty much the same. And under the hood, pandas actually uses NumPy.
[0:14:50.78 --> 0:15:06.98]	  So and like in NumPy, we have, so like in pandas, we can do this multiplication and so on. Element wise, we can also have some logical operators.
[0:15:06.98 --> 0:15:18.50]	  So for example, if we want to find all the records that were created after 2010, let's say 2015.
[0:15:19.44 --> 0:15:27.12]	  Right, so we see that this, this and these records were created after 2015.
[0:15:27.98 --> 0:15:38.62]	  So this is how we do this. Right, so this is very similar to, to NumPy. And again, so I'm already talking about filtering.
[0:15:39.02 --> 0:15:49.44]	  So let's say if we want to look at all the records that were produced, that were all the cars that were manufactured after year 2015.
[0:15:49.94 --> 0:15:59.92]	  This is how we do this. So there are two parts here. So the first part is this part inside. Right, so this is the condition.
[0:16:00.72 --> 0:16:15.64]	  So it returns a new series with binary series with false and true values only. And what this thing does here, it looks at the values that are true and returns only them.
[0:16:15.70 --> 0:16:24.20]	  We have a new data frame, which contains only rows that were produced after 2012.
[0:16:25.06 --> 0:16:35.36]	  And let's say if we want to find all cars that are Nissan, then we write something like this, make equals to Nissan.
[0:16:35.94 --> 0:16:43.28]	  And then we have two cars that are manufactured by Nissan. We can actually combine this.
[0:16:43.68 --> 0:16:55.88]	  So let's say if we want to get cars that are manufactured by Nissan and, and produced after 2015.
[0:16:56.16 --> 0:17:02.90]	  So this is what we do. We combine them using this logical and operation.
[0:17:03.60 --> 0:17:05.82]	  Yeah, it's just one record.
[0:17:07.12 --> 0:17:15.98]	  Okay, so let's talk a bit about string operators. So this is something that NumPy doesn't have. So NumPy is mostly used for processing numbers.
[0:17:16.04 --> 0:17:24.54]	  And in pandas we often have strings. So that's why there are a couple of useful things for manipulating strings.
[0:17:25.60 --> 0:17:29.56]	  So let's take vehicle style column.
[0:17:31.10 --> 0:17:43.62]	  So this is a thing. And we see that sometimes here, so this is sedan with capital S, this is sedan with lower case letter.
[0:17:43.92 --> 0:17:59.02]	  So yeah, it would be nice if we can somehow standardize it. So in Python, there is a function, there's a method from the string class called lower, which takes a string and turns it into lowercase.
[0:17:59.38 --> 0:18:04.70]	  So let's say turns capital case to lowercase and keeps lowercase letters.
[0:18:05.22 --> 0:18:11.58]	  So we can, what we want to do is we want to apply this function to every element of the series.
[0:18:11.98 --> 0:18:23.70]	  For that, we can use this thing called str, the loss to invoke string methods on the entire series. So we can do this.
[0:18:24.14 --> 0:18:29.90]	  So we can say, let's apply the lower function on all these things from here.
[0:18:30.66 --> 0:18:38.86]	  And it gives us lowercase. So you see like everything turned, all the capital letters turned into lowercase letters.
[0:18:39.46 --> 0:18:49.10]	  Another thing we can do is we can replace all the spaces with underscores. So because sometimes maybe you have underscores, sometimes you don't.
[0:18:49.10 --> 0:19:00.02]	  So this is a typical preprocessing step when you work with text in case of a usual string, let's say we have machine learning zoom cam, and then there is a method called replace.
[0:19:01.02 --> 0:19:10.54]	  And then first it gets the character you want to replace. And then second is what you want to replace with. Right. So you want to replace this one by this one.
[0:19:11.34 --> 0:19:20.46]	  So and then it replaces all the occurrences of space by the underscore. So we want to do the same here.
[0:19:21.08 --> 0:19:36.08]	  So we can just copy this and apply it again using this str thing to all the elements from series. And you see so here we have a space here this space is replaced by an underscore.
[0:19:37.54 --> 0:19:47.48]	  And we can actually change this. So first we can to see it's actually, it doesn't change it, it returns a new series with the modification.
[0:19:47.80 --> 0:20:00.18]	  So actually, even though we lowercase here, here it's a, it still stays capital case, right. So because it doesn't override the series, it returns a new series with new values.
[0:20:00.72 --> 0:20:10.66]	  We can actually change them to first replace and then lowercase. And here we have something that is, let's say more uniform.
[0:20:11.54 --> 0:20:19.92]	  And then what we can do next is because this data frame still has the old values.
[0:20:21.20 --> 0:20:28.96]	  So what we can do is we can replace them with this clean version. So for that, we use the assignment operator.
[0:20:29.72 --> 0:20:36.44]	  And we just write this vehicle style, the value with the new value.
[0:20:37.30 --> 0:20:42.26]	  And now if we look at the data frame, we see, sorry.
[0:20:43.32 --> 0:20:57.98]	  So look at the data frame and we see that the values are overwritten. So next thing we will look at is summarizing operators. So like in NumPy, we have this element vice operators and summarizing operators.
[0:20:58.54 --> 0:21:07.52]	  The same thing. We have the same summarizing operators in pandas. So let's take at the price.
[0:2 --> 0:21:22.94]	  That's MSRP. So we have this price variable. So we again can look at the mean value, which is 2000 max value. So this is pretty much the same as we have in NumPy.
[0:21:23.76 --> 0:21:28.24]	  Right. And mean, for example, this is the average number.
[0:21:30.10 --> 0:21:44.54]	  But in addition to that, there is a useful function called describe, which reports all the useful statistics. So first it tells you how many records are there.
[0:21:44.64 --> 0:21:53.12]	  What is the size of this? What is the size of the series? What is the mean value? What is the standard deviation? What is the minimal?
[0:21:53.76 --> 0:22:06.30]	  Then it also returns the percentiles, like 25th percentiles, 76th percentile, and the max value. So it gives you a lot of information.
[0:22:07.32 --> 0:22:19.86]	  And we can actually do the same thing, but for the entire data frame. So we can just call describe on the data frame and what it does, it looks at, it finds all the numerical columns.
[0:22:20.10 --> 0:22:26.78]	  So we have four numerical columns here. We have year, engine, horsepower, engine cylinders, and price.
[0:22:27.30 --> 0:22:37.38]	  So for all the variables, for all the columns that are in America, so of course it cannot compute the mean value of model or make. So it can only look at numerical values.
[0:22:37.72 --> 0:22:44.48]	  So it looks at all the numerical values and computes all these summary statistics for them. So this is useful.
[0:22:45.64 --> 0:22:57.96]	  And yes, what I also often do is I use round here to just look at the rounded up to two decimal points. So it makes it a bit more compact.
[0:22:58.72 --> 0:23:08.20]	  There are some things we can also do for string, for strings, or we call them categorical variables. So for columns with strings.
[0:23:08.38 --> 0:23:11.40]	  So let's say we have this make column.
[0:23:13.10 --> 0:23:21.84]	  And we want to understand how many unique values are there. So we see that, for example, there are two n-sounds, but the rest are unique.
[0:23:22.54 --> 0:23:32.84]	  So if we want to calculate how many unique values are there, we use this n unique function and just say, okay, here are four unique values.
[0:23:33.54 --> 0:23:43.26]	  And actually we can apply it to the entire data frame. And then it will tell us how many unique values are there for all the columns of the data frame.
[0:23:43.42 --> 0:23:53.04]	  So there are four unique values for make. There are basically for every, so there are only two transmission types. So it's manual or automatic.
[0:23:53.64 --> 0:24:08.98]	  Yeah, so you can get a summary. Then we mentioned that there is one here, this an an, which is a missing value. And when it comes to machine learning, we don't want to have this missing values.
[0:24:09.30 --> 0:24:28.72]	  So we want to know how many of them, and we want to do something with them. So for that, we can use this isNull function that returns another data frame, a new data frame, where for each cell it says true if a value is missing.
[0:24:29.08 --> 0:24:44.76]	  See, this is true here. And it says false if the value is not missing. So only one cell has a missing value. That's why it has true here, and the rest are not missing.
[0:24:45.98 --> 0:24:58.50]	  So this is not always super useful. So what we can do now is we want to understand, per each column, how many missing values are there. And for that, we call the sum method.
[0:24:59.28 --> 0:25:13.88]	  And when we do that, we, so it sums across columns, so it applies the sum to each column. And then it tells how many missing values are there in each column.
[0:25:14.22 --> 0:25:25.52]	  So you see that there is one for engine horsepower and the rest are not missing. So we are almost over. So there's two things that I want to talk about.
[0:25:25.52 --> 0:25:37.18]	  So first is grouping. So we want to do something like group by. So if you know SQL, let's say if we have a query like that, let me type it.
[0:25:38.34 --> 0:25:41.70]	  So let's say we have a query like that.
[0:25:43.84 --> 0:26:04.98]	  And if you know SQL, so let me translate this query to human language. So we want to group by, we want to, so we want to compute the average price per transmission type.
[0:26:05.82 --> 0:26:12.54]	  So basically want to first group by transmission type. And then within each group, we want to compute the average number.
[0:26:13.14 --> 0:26:23.28]	  So for in SQL, it will look like that. So this is a query that we would write in SQL and let's translate this query to pandas now.
[0:26:24.82 --> 0:26:38.32]	  So in pandas, we have a method called group by. And here we specify what we want to group by which column this variable transmission type, right? So we want to group by it.
[0:26:38.92 --> 0:26:50.98]	  So yeah, this is what we write here group by transmission type. And then we have this me MR MSRP variable, which is price.
[0:26:53.42 --> 0:26:59.14]	  It's manufacturer suggested retail price price or just price. And then we want to compute the mean number.
[0:27:00.08 --> 0:27:09.08]	  Or let's say if you want to compute the minimum number or the maximum number. So this is how you do this.
[0:27:11.16 --> 0:27:19.96]	  Everything in pandas is backed by numpy. So let's say if we have this MSRP.
[0:27:20.92 --> 0:27:33.18]	  Right, so which is a serious if we want to get the underlying numpy array, we just use the values field and it returns the underlying.
[0:27:35.88 --> 0:27:49.66]	  Then the last useful thing I want to show you is have this data frame and for creating this data frame we use the list of dictionaries. Right. So this is what we used for creating it.
[0:27:50.08 --> 0:27:58.48]	  And sometimes you need to convert pandas data frame back to this form back to a list of dictionaries.
[0:27:58.96 --> 0:28:10.02]	  And for this, what you do is use a function called to dict. And then you specify that you want to do is per record.
[0:28:11.20 --> 0:28:18.40]	  So orient value is records. And it gives you a list with dictionaries that you can do something with them.
[0:28:18.62 --> 0:28:23.64]	  Like you can save it to a file or something like this. So it's pretty useful.
[0:28:24.44 --> 0:28:33.94]	  And in the next video, it will not be a lesson just a video with a summary of everything we learned during this session. So see you soon.
